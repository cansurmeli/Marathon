name: Static Scan

on:
  workflow_dispatch:

run-name: Static Scan - ${{ github.ref_name }}

permissions:
  contents: read

jobs:
  sast-scan:
    name: Static Analysis Security Testing (SAST) Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "11"

      - name: Setup Maven Dependency Cache
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: mvn clean install

      - name: Generate CycloneDX SBOM
        run: mvn org.cyclonedx:cyclonedx-maven-plugin:2.7.9:makeAggregateBom

      - name: Upload SBOM as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom-cyclonedx.json
          path: target/bom.json

      - name: Grype Dependency Scan
        id: scan
        uses: anchore/scan-action@a5605eb0943e46279cb4fbd9d44297355d3520ab
        with:
          path: .
          fail-build: false

      - name: Upload Grype Report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: grype-scan-results.sarif
          path: ${{ steps.scan.outputs.sarif }}

      - name: Download SpotBugs CLI + FindSecBugs Rule Pack
        run: |
          wget -O spotbugs.tgz https://github.com/spotbugs/spotbugs/releases/download/4.9.3/spotbugs-4.9.3.tgz
          tar -xzf spotbugs.tgz
          mv spotbugs-*/ spotbugs/

          wget -O findsecbugs.jar https://search.maven.org/remotecontent?filepath=com/h3xstream/findsecbugs/findsecbugs-plugin/1.12.0/findsecbugs-plugin-1.12.0.jar
          mv findsecbugs.jar spotbugs/plugin/.

      - name: Run Spotbugs CLI (SARIF)
        run: |
          spotbugs/bin/spotbugs -sarif:/tmp/raw-spotbugs-output.txt -effort:max -low -auxclasspath lib:target/classes target/classes > /tmp/raw-spotbugs-output.txt
          grep -A100000 '{"version"' /tmp/raw-spotbugs-output.txt > /tmp/spotbugs-results.sarif

      - name: Upload SpotBugs SARIF results
        uses: actions/upload-artifact@v4
        with:
          name: spotbugs-scan-results.sarif
          path: /tmp/spotbugs-results.sarif

      - name: Hadolint Dockerfile Linter
        uses: hadolint/hadolint-action@2332a7b74a6de0dda2e2221d575162eba76ba5e5
        with:
          dockerfile: ./Dockerfile
          recursive: true
          no-fail: true
          format: sarif

      - name: Write HADOLINT_RESULTS to SARIF file
        run: echo "$HADOLINT_RESULTS" > /tmp/hadolint-results.sarif
        env:
          HADOLINT_RESULTS: ${{ env.HADOLINT_RESULTS }}

      - name: Upload Hadolint SARIF results
        uses: actions/upload-artifact@v4
        with:
          name: hadolint-scan-results.sarif
          path: /tmp/hadolint-results.sarif

      - name: Create empty ".truffleignore" in case it doesn't exists
        run: touch .truffleignore

      - name: Secret Scan with Trufflehog
        uses: trufflesecurity/trufflehog@ad6fc8fb446b8fafbf7ea8193d2d6bfd42f45690
        continue-on-error: true
        with:
          path: ./
          base: ${{ github.head_ref }}
          extra_args: --exclude-paths=.truffleignore --no-verification

  semgrep-scan:
    name: Semgrep Scans
    runs-on: ubuntu-latest
    container:
      image: returntocorp/semgrep@sha256:8f85dbfb5d38592d0b916caac855cf18facba40674988caf763d52b9fe916694

    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Run Smegrep using selected rules (metrics off)
        run: |
          semgrep scan --sarif --config auto . --output /tmp/semgrep-results.sarif || true

      - name: Upload Semgrep SARIF results
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-scan-results.sarif
          path: /tmp/semgrep-results.sarif

  collect-sarif-results:
    name: Collect results
    runs-on: ubuntu-latest
    needs:
      - sast-scan
      - semgrep-scan

    steps:
      - name: Download all SARIF artifacts
        uses: actions/download-artifact@v4
        with:
          path: sarif-input

      - name: List downloaded SARIFs
        if: false
        run: |
          pwd
          find sarif-input -type f

      - name: Install sarif-tools and convert SARIF to HTML
        run: |
          pip install sarif-tools
          sarif summary sarif-input
          sarif html -o /tmp/summary.html sarif-input

      - name: Upload SARIF HTML Report
        uses: actions/upload-artifact@v4
        with:
          name: summary.html
          path: /tmp/summary.html
